package com.cooee.phenix.Functions.DynamicEntry.Dialog;import java.io.File;import java.io.IOException;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.ActionBar.LayoutParams;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.cooee.framework.config.defaultConfig.BaseDefaultConfig;import com.cooee.framework.function.DynamicEntry.OperateDynamicUtils;import com.cooee.framework.function.DynamicEntry.DLManager.Constants;import com.cooee.framework.function.DynamicEntry.DLManager.DlManager;import com.cooee.framework.function.DynamicEntry.DLManager.SharedPreferenceHandle;import com.cooee.framework.function.DynamicEntry.Dialog.DynamicEntryDialogConstant;import com.cooee.framework.function.DynamicEntry.Dialog.DynamicEntrySmartDownloadInfo;import com.cooee.framework.utils.StringUtils;import com.cooee.phenix.BubbleTextView;import com.cooee.phenix.DeviceProfile;import com.cooee.phenix.DynamicGrid;import com.cooee.phenix.IconCache;import com.cooee.phenix.LauncherAppState;import com.cooee.phenix.R;import com.cooee.phenix.Utilities;import com.cooee.phenix.Functions.DynamicEntry.OperateDynamicMain;import com.cooee.phenix.config.defaultConfig.LauncherDefaultConfig;import com.cooee.phenix.data.ShortcutInfo;import cool.sdk.SAManager.SAHelper;import cool.sdk.download.manager.dl_info;public class DynamicEntryDialogActivity extends Activity{		private int dialog_id = 0;	private boolean normalOpen = false;		//private int screen_height = 0;	//private View d_layout;	@Override	protected void onCreate(			Bundle savedInstanceState )	{		// TODO Auto-generated method stub		super.onCreate( savedInstanceState );		final Context context = getApplicationContext();		//DisplayMetrics dm = new DisplayMetrics();		//getWindowManager().getDefaultDisplay().getMetrics( dm );		//screen_height = dm.heightPixels;		Bundle bundle = getIntent().getExtras();		dialog_id = bundle.getInt( DynamicEntryDialogConstant.DIALOG_ID , 0 );		switch( dialog_id )		{			case DynamicEntryDialogConstant.DIALOG_DISCLAIMER:				disclaimerDialog( context , bundle.getInt( "disclaimer" , -1 ) );				break;			case DynamicEntryDialogConstant.DIALOG_SMARTDOWNLOAD:				String smartInfo = bundle.getString( DynamicEntryDialogConstant.SMART_INFO , null );				if( smartInfo != null )				{					smartDownloadDialog( context , smartInfo );				}				else				{					finish();				}				break;			case DynamicEntryDialogConstant.DIALOG_DOWNLOADONE:				String nextInfo = bundle.getString( DynamicEntryDialogConstant.SMART_INFO , null );				if( nextInfo != null )				{					downloadNextDialog( context , nextInfo );				}				else				{					finish();				}				break;		}	}		/*	@Override	public boolean onTouchEvent(			MotionEvent event )	{		// TODO Auto-generated method stub		if( event.getAction() == MotionEvent.ACTION_DOWN )		{			if( !( event.getX() >= -10 && event.getY() >= -10 ) || event.getY() < screen_height - d_layout.getHeight() - 10 )			{				finish();				return true;			}		}		return super.onTouchEvent( event );	}	*/	private void smartDownloadDialog(			final Context context ,			String smartInfo )	{		setContentView( R.layout.dynamic_smart_download_dialog );		getWindow().setLayout( LayoutParams.MATCH_PARENT , LayoutParams.MATCH_PARENT );		//d_layout = this.findViewById( R.id.dialog_layout );		//加载icon		final BubbleTextView icon_zero = (BubbleTextView)findViewById( R.id.icon0 );		final BubbleTextView icon_one = (BubbleTextView)findViewById( R.id.icon1 );		final BubbleTextView icon_two = (BubbleTextView)findViewById( R.id.icon2 );		final BubbleTextView icon_three = (BubbleTextView)findViewById( R.id.icon3 );		final ImageView dialog_cancel = (ImageView)findViewById( R.id.dialog_cancel );		//设置每个icon的图片和title ybh@2014/12/22 ADD START		final ArrayList<DynamicEntrySmartDownloadInfo> list = processSmartDownloadInfo( context , smartInfo );		if( list.size() == 0 )		{			finish();			return;		}		if( !normalOpen )		{			TextView title = (TextView)this.findViewById( R.id.dialog_title );			title.setText( R.string.dynamic_smart_download_desc );		}		IconCache mIconCache = LauncherAppState.getInstance().getIconCache();		ShortcutInfo info0 = createShortcutInfo( list.get( 0 ).getBitmap() , list.get( 0 ).getTitle() );		if( info0 == null )		{			finish();			return;		}		icon_zero.applyFromShortcutInfo( info0 , mIconCache );		icon_zero.setOperateIconLoadDone( Constants.DL_STATUS_SUCCESS );		if( list.size() > 1 )		{			ShortcutInfo info1 = createShortcutInfo( list.get( 1 ).getBitmap() , list.get( 1 ).getTitle() );			if( info1 == null )			{				finish();				return;			}			icon_one.applyFromShortcutInfo( info1 , mIconCache );			icon_one.setOperateIconLoadDone( Constants.DL_STATUS_SUCCESS );		}		else		{			this.findViewById( R.id.icon1 ).setVisibility( View.GONE );			this.findViewById( R.id.icon2 ).setVisibility( View.GONE );			this.findViewById( R.id.icon3 ).setVisibility( View.GONE );		}		if( list.size() > 2 )		{			ShortcutInfo info2 = createShortcutInfo( list.get( 2 ).getBitmap() , list.get( 2 ).getTitle() );			if( info2 == null )			{				finish();				return;			}			icon_two.applyFromShortcutInfo( info2 , mIconCache );			icon_two.setOperateIconLoadDone( Constants.DL_STATUS_SUCCESS );		}		else		{			this.findViewById( R.id.icon2 ).setVisibility( View.GONE );			this.findViewById( R.id.icon3 ).setVisibility( View.GONE );		}		if( list.size() > 3 )		{			ShortcutInfo info3 = createShortcutInfo( list.get( 3 ).getBitmap() , list.get( 3 ).getTitle() );			if( info3 == null )			{				finish();				return;			}			icon_three.applyFromShortcutInfo( info3 , mIconCache );			icon_three.setOperateIconLoadDone( Constants.DL_STATUS_SUCCESS );		}		else		{			this.findViewById( R.id.icon3 ).setVisibility( View.GONE );		}		LauncherAppState app = LauncherAppState.getInstance();		DynamicGrid mDynamicGrid = app.getDynamicGrid();		if( mDynamicGrid != null )		{			DeviceProfile grid = mDynamicGrid.getDeviceProfile();			if( grid != null )			{				if( LauncherDefaultConfig.CONFIG_ITEM_STYLE == BaseDefaultConfig.ITEM_STYLE_NORMAL )				{					icon_zero.setTextColor( context.getResources().getColor( android.R.color.black ) );					icon_zero.setShadowsEnabled( false );					icon_one.setTextColor( context.getResources().getColor( android.R.color.black ) );					icon_one.setShadowsEnabled( false );					icon_two.setTextColor( context.getResources().getColor( android.R.color.black ) );					icon_two.setShadowsEnabled( false );					icon_three.setTextColor( context.getResources().getColor( android.R.color.black ) );					icon_three.setShadowsEnabled( false );				}				else if( LauncherDefaultConfig.CONFIG_ITEM_STYLE == BaseDefaultConfig.ITEM_STYLE_ICON_EXTENDS_INTO_TITLE )				{					int mCellWidth = grid.getSignleViewAvailableWidthPx();					int mCellHeight = grid.getSignleViewAvailableHeightPx();					LinearLayout.LayoutParams params = new LinearLayout.LayoutParams( mCellWidth , mCellHeight );					icon_zero.setLayoutParams( params );					icon_one.setLayoutParams( params );					icon_two.setLayoutParams( params );					icon_three.setLayoutParams( params );					icon_zero.setCompoundDrawablePadding( (int)( -icon_zero.getLineHeight() * 1.75f ) );//1.75f是调出来的，暂时未知为什么不能匹配bubbletextview中的					icon_one.setCompoundDrawablePadding( (int)( -icon_zero.getLineHeight() * 1.75f ) );					icon_two.setCompoundDrawablePadding( (int)( -icon_zero.getLineHeight() * 1.75f ) );					icon_three.setCompoundDrawablePadding( (int)( -icon_zero.getLineHeight() * 1.75f ) );				}			}		}		//设置每个icon的图片和title ybh@2014/12/22 ADD END		OnClickListener listener = new OnClickListener() {						@Override			public void onClick(					View v )			{				// TODO Auto-generated method stub				if( v == icon_zero )				{					processClick( context , list , 0 );				}				else if( v == icon_one )				{					processClick( context , list , 1 );				}				else if( v == icon_two )				{					processClick( context , list , 2 );				}				else if( v == icon_three )				{					processClick( context , list , 3 );				}				finish();			}		};		icon_zero.setOnClickListener( listener );		icon_one.setOnClickListener( listener );		icon_two.setOnClickListener( listener );		icon_three.setOnClickListener( listener );		dialog_cancel.setOnClickListener( listener );	}		private void processClick(			Context context ,			ArrayList<DynamicEntrySmartDownloadInfo> list ,			int index )	{		String filePath = DlManager.getInstance().getDownloadHandle().getDownSuccessFilePath( list.get( index ).getPkgName() );		if( filePath == null )		{			//Fixed Me 出现这样的情况应该如何处理呢？目前是直接返回			finish();			return;		}		if( !OperateDynamicUtils.checkApkExist( context , list.get( 0 ).getPkgName() ) )		{			OperateDynamicUtils.installAPKFile( context , filePath );		}	}		private ArrayList<DynamicEntrySmartDownloadInfo> processSmartDownloadInfo(			Context context ,			String smartInfo )	{		ArrayList<DynamicEntrySmartDownloadInfo> list = new ArrayList<DynamicEntrySmartDownloadInfo>();		if( smartInfo.equals( DynamicEntryDialogConstant.DYNAMIC_VERSION ) )		{			List<dl_info> dl_info_list = SAHelper.getInstance( LauncherAppState.getActivityInstance() ).getSuccessButNotInstallList();			if( dl_info_list != null )			{				int count = 0;				for( dl_info info : dl_info_list )				{					String pkgName = (String)info.getValue( Constants.DL_INFO_GET_PKGNAME_KEY );					if( pkgName != null )					{						String value = DlManager.getInstance().getSharedPreferenceHandle().getValue( StringUtils.concat( SharedPreferenceHandle.SILENTDOWNLOAD_PREFIX , pkgName ) );						if( value != null && value.equals( String.valueOf( SharedPreferenceHandle.SIENT_SHOW ) ) )						{							if( count == 0 )							{								count++;								continue;							}							else							{								String title = DlManager.getInstance().getWifiSAHandle().getTitleName( info );								Bitmap bitmap = DlManager.getInstance().getDownloadHandle().getDownBitmap( pkgName );								list.add( new DynamicEntrySmartDownloadInfo( pkgName , title , null , bitmap ) );							}						}					}				}			}			return list;		}		try		{			JSONObject content = new JSONObject( smartInfo );			normalOpen = content.optBoolean( "normal" );			JSONArray infos = content.getJSONArray( "SmartDownloadInfo" );			for( int j = 0 ; j < infos.length() ; j++ )			{				JSONObject item = infos.getJSONObject( j );				String pkgName = item.optString( "pkgName" );				String title = item.optString( "title" );				String path = item.optString( "path" );				Bitmap bitmap = findBitmap( context , path );				list.add( new DynamicEntrySmartDownloadInfo( pkgName , title , path , bitmap ) );			}		}		catch( JSONException e )		{			// TODO Auto-generated catch block			e.printStackTrace();		}		return list;	}		private void disclaimerDialog(			final Context context ,			int disclaimer )	{		/*		if( disclaimer == -1 )		{			finish();			return;		}		setContentView( R.layout.dynamic_disclaimer_dialog );		this.findViewById( R.id.down_next ).setVisibility( View.GONE );		final TextView t_yes = (TextView)this.findViewById( R.id.text_yes );		final TextView t_yes_1 = (TextView)this.findViewById( R.id.one_button );		TextView t_no = (TextView)this.findViewById( R.id.text_no );		OnClickListener listener = new OnClickListener() {						@Override			public void onClick(					View v )			{				// TODO Auto-generated method stub				if( v == t_yes || v == t_yes_1 )				{					Intent intent = new Intent();					intent.setClassName( context , "com.iLoong.launcher.desktop.iLoongLauncher" );					intent.addFlags( Intent.FLAG_ACTIVITY_NEW_TASK );					context.startActivity( intent );					OperateDynamicProxy.getInstance( context ).directlyShow();				}				finish();			}		};		if( 0 == disclaimer )		{			t_yes_1.setVisibility( View.GONE );			t_yes.setOnClickListener( listener );			t_no.setOnClickListener( listener );		}		else		{			this.findViewById( R.id.two_button ).setVisibility( View.GONE );			this.findViewById( R.id.line_separated ).setVisibility( View.GONE );			t_yes_1.setOnClickListener( listener );		}		*/	}		private String processSmartItem(			String res ,			DynamicEntrySmartDownloadInfo info )	{		try		{			JSONObject item = new JSONObject( res );			String last_name = item.optString( DynamicEntryDialogConstant.LAST_NAME );			if( last_name != null && !last_name.equals( "" ) )			{				String pkgName = item.optString( "pkgName" );				String title = item.optString( "title" );				String path = item.optString( "path" );				int size = item.optInt( "size" );				info.setPkgName( pkgName );				info.setTitle( title );				info.setPath( path );				info.setSize( size );				return last_name;			}		}		catch( JSONException e )		{			// TODO Auto-generated catch block			e.printStackTrace();		}		return null;	}		private void downloadNextDialog(			final Context context ,			String res )	{		setContentView( R.layout.dynamic_smart_download_dialog );		getWindow().setLayout( LayoutParams.MATCH_PARENT , LayoutParams.MATCH_PARENT );		//d_layout = this.findViewById( R.id.dialog_layout );		this.findViewById( R.id.icons ).setVisibility( View.GONE );		findViewById( R.id.next_download ).setVisibility( View.VISIBLE );		TextView title = (TextView)this.findViewById( R.id.dialog_title );		title.setText( R.string.dynamic_other_download );		final DynamicEntrySmartDownloadInfo sdInfo = new DynamicEntrySmartDownloadInfo();		String last_name = processSmartItem( res , sdInfo );		if( last_name == null )		{			finish();			return;		}		ImageView next_icon = (ImageView)this.findViewById( R.id.next_icon );		TextView next_name = (TextView)(TextView)this.findViewById( R.id.next_title );		TextView next_size = (TextView)(TextView)this.findViewById( R.id.next_size );		Bitmap bitmap = createBitmap( context , sdInfo.getPath() );		if( bitmap == null )		{			finish();			return;		}		next_icon.setImageBitmap( bitmap );		//mergeImage( bitmap , null , next_icon );		next_name.setText( sdInfo.getTitle() );		int size = sdInfo.getSize();		DecimalFormat decimalFormat = new DecimalFormat( "0.00" );		String Ssize = StringUtils.concat( decimalFormat.format( (double)size / 1024 ) , "M" );		next_size.setText( StringUtils.concat( LauncherDefaultConfig.getString( R.string.dynamic_next_size ) , Ssize ) );		Button next_button = (Button)findViewById( R.id.next_button );		next_button.setOnClickListener( new OnClickListener() {						@Override			public void onClick(					View v )			{				// TODO Auto-generated method stub				Runnable runnable = new Runnable() {										@Override					public void run()					{						// TODO Auto-generated method stub						DlManager.getInstance().downloadFile( LauncherAppState.getActivityInstance() , sdInfo.getTitle() , sdInfo.getPkgName() , false );					}				};				( (Activity)LauncherAppState.getActivityInstance() ).runOnUiThread( runnable );				finish();			}		} );		ImageView image_cancel = (ImageView)findViewById( R.id.dialog_cancel );		image_cancel.setOnClickListener( new OnClickListener() {						@Override			public void onClick(					View v )			{				// TODO Auto-generated method stub				finish();			}		} );		/*		this.findViewById( RR.id.treasure ).setVisibility( View.GONE );		this.findViewById( RR.id.disclaimer_desc ).setVisibility( View.GONE );		final TextView t_yes = (TextView)this.findViewById( RR.id.text_yes );		TextView t_no = (TextView)this.findViewById( RR.id.text_no );		TextView will_end = (TextView)this.findViewById( RR.id.download_will_end );		ImageView next_icon = (ImageView)this.findViewById( RR.id.next_icon );		TextView next_name = (TextView)(TextView)this.findViewById( RR.id.next_name );		TextView next_size = (TextView)(TextView)this.findViewById( RR.id.next_size );		final DynamicEntrySmartDownloadInfo sdInfo = new DynamicEntrySmartDownloadInfo();		String last_name = processSmartItem( res , sdInfo );		if( last_name == null )		{			finish();			return;		}		String pre_text = context.getResources().getString( RR.string.dynamic_yours );		String last_text = context.getResources().getString( RR.string.dynamic_download_will_end );		SpannableStringBuilder strBuilder = new SpannableStringBuilder( pre_text + last_name + last_text );		ForegroundColorSpan preSpan = new ForegroundColorSpan( 0xff3c3c3c );		ForegroundColorSpan redSpan = new ForegroundColorSpan( Color.RED );		ForegroundColorSpan blackSpan = new ForegroundColorSpan( 0xff3c3c3c );		strBuilder.setSpan( preSpan , 0 , pre_text.length() , Spannable.SPAN_EXCLUSIVE_EXCLUSIVE );		strBuilder.setSpan( redSpan , pre_text.length() , ( pre_text + last_name ).length() , Spannable.SPAN_EXCLUSIVE_EXCLUSIVE );		strBuilder.setSpan( blackSpan , ( pre_text + last_name ).length() , ( pre_text + last_name + last_text ).length() , Spannable.SPAN_EXCLUSIVE_EXCLUSIVE );		will_end.setText( strBuilder );		Bitmap bitmap = createBitmap( context , sdInfo.getPath() );		Drawable overMap = context.getResources().getDrawable( RR.drawable.gomarket_hot );		mergeImage( bitmap , overMap , next_icon );		next_name.setText( sdInfo.getTitle() );		int size = sdInfo.getSize();		DecimalFormat decimalFormat = new DecimalFormat( "0.00" );		String Ssize = decimalFormat.format( (double)size / 1024 ) + "M";		next_size.setText( context.getResources().getString( RR.string.dynamic_next_size ) + Ssize );		next_size.setTextColor( Color.RED );		OnClickListener listener = new OnClickListener() {						@Override			public void onClick(					View v )			{				// TODO Auto-generated method stub				if( v == t_yes )				{					Runnable runnable = new Runnable() {												@Override						public void run()						{							// TODO Auto-generated method stub							DlManager.getInstance().downloadFile( iLoongLauncher.getInstance() , sdInfo.getTitle() , sdInfo.getPkgName() );						}					};					( (Activity)iLoongLauncher.getInstance() ).runOnUiThread( runnable );				}				finish();			}		};		t_yes.setOnClickListener( listener );		t_no.setOnClickListener( listener );		this.findViewById( RR.id.one_button ).setVisibility( View.GONE );*/	}		@Override	protected void onPause()	{		// TODO Auto-generated method stub		if( LauncherDefaultConfig.SWITCH_ENABLE_DEBUG )			Log.i( "smart" , "onPause" );		super.onPause();		finish();	}		private ShortcutInfo createShortcutInfo(			Bitmap bitmap ,			String title )	{		Bitmap bmp = Utilities.createIconBitmapWhenItemIsThemeThirdPartyItem( bitmap , LauncherAppState.getInstance().getContext() , true , false );		Intent intent = new Intent( OperateDynamicMain.OPERATE_DYNAMIC_FOLDER );		intent.putExtra( OperateDynamicMain.FOLDER_VERSION , "install" );		return OperateDynamicMain.createShortcutInfo( bmp , title , intent , 0 );	}		public Bitmap createBitmap(			Context context ,			String path )	{		int iconSize = Utilities.sIconWidth > 0 ? Utilities.sIconWidth : LauncherDefaultConfig.getDimensionPixelSize( R.dimen.app_icon_size );		Bitmap bmp = findBitmap( context , path );		if( bmp != null )		{			return Bitmap.createScaledBitmap( bmp , iconSize , iconSize , true );		}		return null;	}		public Bitmap findBitmap(			Context context ,			String path )	{		Bitmap bitmap = null;		File file = new File( path );		if( file.exists() )		{			bitmap = BitmapFactory.decodeFile( path );		}		else		{			try			{				bitmap = BitmapFactory.decodeStream( context.getAssets().open( path ) );			}			catch( IOException ex )			{				ex.printStackTrace();			}		}		return bitmap;	}}